begintemplate d1msn

public soma, dend1, dend2, dend3, dend4, dend1_1, dend1_2
public dend2_1, dend2_2, dend4_1, dend4_2, dend3_2, dend3_1
public dend5, dend6, dend5_1, dend6_1, dend5_2, dend6_2
public all
public proximal, middend, distal

create soma[1], dend1, dend2, dend3, dend4, dend1_1[3], dend1_2[3]
create dend2_1[3], dend2_2[3], dend4_1[3], dend4_2[3], dend3_2[3], dend3_1[3]
create dend5, dend5_1[3], dend5_2
create dend6, dend6_1, dend6_2


proc init_msn() { 
	topol()
	subsets()
	geom()

	geom_nseg()
	compts = 0
	forall {
		//print secname(), " ", 
		nseg  compts = compts + nseg
	}
	print compts, " compartments"

      /**  turn off synaptic input during optimization phase.
	synlist = new List()
	leaf    = new List()
	
	synloops()
      **/
	x = y = z = 0 // only change via position
}

proc topol() { local i
  connect dend1(0), soma[0](1)
  connect dend2(0), soma[0](1)
  connect dend3(0), soma[0](0)
  connect dend4(0), soma[0](0)
  connect dend5(0), soma[0](1)
  connect dend6(0), soma[0](0)
  connect dend1_1(0), dend1(1)
  for i = 1, 2 connect dend1_1[i](0), dend1_1(1)
  connect dend1_2(0), dend1(1)
  for i = 1, 2 connect dend1_2[i](0), dend1_2(1)
  connect dend2_1(0), dend2(1)
  for i = 1, 2 connect dend2_1[i](0), dend2_1(1)
  connect dend2_2(0), dend2(1)
  for i = 1, 2 connect dend2_2[i](0), dend2_2(1)
  connect dend4_1(0), dend4(1)
  for i = 1, 2 connect dend4_1[i](0), dend4_1(1)
  connect dend4_2(0), dend4(1)
  for i = 1, 2 connect dend4_2[i](0), dend4_2(1)
  connect dend3_2(0), dend3(1)
  for i = 1, 2 connect dend3_2[i](0), dend3_2(1)
  connect dend3_1(0), dend3(1)
  for i = 1, 2 connect dend3_1[i](0), dend3_1(1)

  // two more dendrites, added Jan 2017
  connect dend5_1(0), dend5(1)
  for i = 1, 2 connect dend5_1[i](0), dend5_1(1)
  connect dend5_2(0), dend5(1)
  connect dend6_1(0), dend6(1)
  connect dend6_2(0), dend6(1)
// Above is the actual connection!!
  basic_shape()
}
// The basic shape is actually the presentation of the toy morphology!!!

proc basic_shape() {
  soma[0] {pt3dclear() pt3dadd(0, 0, 0, 1) pt3dadd(15, 0, 0, 1)}
  dend1 {pt3dclear() pt3dadd(15, 0, 0, 1) pt3dadd(45, -29, 0, 1)}
  dend2 {pt3dclear() pt3dadd(15, 0, 0, 1) pt3dadd(45, 30, 0, 1)}
  dend3 {pt3dclear() pt3dadd(0, 0, 0, 1) pt3dadd(-29, -29, 0, 1)}
  dend4 {pt3dclear() pt3dadd(0, 0, 0, 1) pt3dadd(-29, 30, 0, 1)}
  dend1_1 {pt3dclear() pt3dadd(45, -29, 0, 1) pt3dadd(45, -59, 0, 1)}
  dend1_2 {pt3dclear() pt3dadd(45, -29, 0, 1) pt3dadd(90, -29, 0, 1)}
  dend2_1 {pt3dclear() pt3dadd(45, 30, 0, 1) pt3dadd(90, 30, 0, 1)}
  dend2_2 {pt3dclear() pt3dadd(45, 30, 0, 1) pt3dadd(60, 75, 0, 1)}
  dend4_1 {pt3dclear() pt3dadd(-29, 30, 0, 1) pt3dadd(-44, 75, 0, 1)}
  dend4_2 {pt3dclear() pt3dadd(-29, 30, 0, 1) pt3dadd(-74, 30, 0, 1)}
  dend3_2 {pt3dclear() pt3dadd(-29, -29, 0, 1) pt3dadd(-74, -29, 0, 1)}
  dend3_1 {pt3dclear() pt3dadd(-29, -29, 0, 1) pt3dadd(-44, -59, 0, 1)}
  dend1_1[1] {pt3dclear() pt3dadd(45, -59, 0, 1) pt3dadd(30, -89, 0, 1)}
  dend1_1[2] {pt3dclear() pt3dadd(45, -59, 0, 1) pt3dadd(75, -74, 0, 1)}
  dend1_2[1] {pt3dclear() pt3dadd(90, -29, 0, 1) pt3dadd(120, -14, 0, 1)}
  dend1_2[2] {pt3dclear() pt3dadd(90, -29, 0, 1) pt3dadd(120, -59, 0, 1)}
  dend2_1[1] {pt3dclear() pt3dadd(90, 30, 0, 1) pt3dadd(120, 15, 0, 1)}
  dend2_1[2] {pt3dclear() pt3dadd(90, 30, 0, 1) pt3dadd(105, 60, 0, 1)}
  dend2_2[1] {pt3dclear() pt3dadd(60, 75, 0, 1) pt3dadd(90, 90, 0, 1)}
  dend2_2[2] {pt3dclear() pt3dadd(60, 75, 0, 1) pt3dadd(45, 105, 0, 1)}
  dend4_1[1] {pt3dclear() pt3dadd(-44, 75, 0, 1) pt3dadd(-14, 105, 0, 1)}
  dend4_1[2] {pt3dclear() pt3dadd(-44, 75, 0, 1) pt3dadd(-74, 90, 0, 1)}
  dend4_2[1] {pt3dclear() pt3dadd(-74, 30, 0, 1) pt3dadd(-89, 60, 0, 1)}
  dend4_2[2] {pt3dclear() pt3dadd(-74, 30, 0, 1) pt3dadd(-104, 15, 0, 1)}
  dend3_2[1] {pt3dclear() pt3dadd(-74, -29, 0, 1) pt3dadd(-104, -14, 0, 1)}
  dend3_2[2] {pt3dclear() pt3dadd(-74, -29, 0, 1) pt3dadd(-104, -59, 0, 1)}
  dend3_1[1] {pt3dclear() pt3dadd(-44, -59, 0, 1) pt3dadd(-29, -89, 0, 1)}
  dend3_1[2] {pt3dclear() pt3dadd(-44, -59, 0, 1) pt3dadd(-89, -74, 0, 1)}

  // added two more dendrites, 1/11/17
  dend5 {pt3dclear() pt3dadd(15, 0, 0, 1) pt3dadd(45, 0, 0, 1)}
  dend6 {pt3dclear() pt3dadd(0, 0, 0, 1) pt3dadd(-30, 0, 0, 1)}
  dend5_1 {pt3dclear() pt3dadd(45,  0, 0, 1) pt3dadd(75, 15, 0, 1)}
  dend5_1[1] {pt3dclear() pt3dadd(75, 15, 0, 0, 1) pt3dadd(90, 15, 0, 1)}
  dend5_1[2] {pt3dclear() pt3dadd(75, 15, 0, 1) pt3dadd(90, 30, 0, 1)}
  dend5_2 {pt3dclear() pt3dadd(45,  0, 0, 1) pt3dadd(75, -15, 0, 1)}
  dend6_1 {pt3dclear() pt3dadd(-30, 0, 0, 1) pt3dadd(-60, 15, 0, 1)}
  dend6_2 {pt3dclear() pt3dadd(-30, 0, 0, 1) pt3dadd(-60, -15, 0, 1)}

}

objref all, proximal, middend, distal

proc subsets() { local i
  objref all, proximal, middend, distal
  all = new SectionList()
    soma[0] all.append()
    dend1 all.append()
    dend2 all.append()
    dend3 all.append()
    dend4 all.append()
    dend5 all.append()
    dend6 all.append()
    dend5_2 all.append()
    dend6_1 all.append()
    dend6_2 all.append()
    for i=0, 2 dend1_1[i] all.append()
    for i=0, 2 dend1_2[i] all.append()
    for i=0, 2 dend2_1[i] all.append()
    for i=0, 2 dend2_2[i] all.append()
    for i=0, 2 dend4_1[i] all.append()
    for i=0, 2 dend4_2[i] all.append()
    for i=0, 2 dend3_2[i] all.append()
    for i=0, 2 dend3_1[i] all.append()
    for i=0, 2 dend5_1[i] all.append()

//  forsec axonal { all.append() }

  proximal = new SectionList()
    dend1 proximal.append()
    dend2 proximal.append()
    dend3 proximal.append()
    dend4 proximal.append()
    dend5 proximal.append()
    dend6 proximal.append()

  middend = new SectionList()
    dend1_1 middend.append()
    dend1_2 middend.append()
    dend2_1 middend.append()
    dend2_2 middend.append()
    dend4_1 middend.append()
    dend4_2 middend.append()
    dend3_2 middend.append()
    dend3_1 middend.append()
    dend5_1 middend.append()
    dend5_2 middend.append()
    dend6_1 middend.append()
    dend6_2 middend.append()

  distal = new SectionList()
    for i=1, 2 dend1_1[i] distal.append()
    for i=1, 2 dend1_2[i] distal.append()
    for i=1, 2 dend2_1[i] distal.append()
    for i=1, 2 dend2_2[i] distal.append()
    for i=1, 2 dend4_1[i] distal.append()
    for i=1, 2 dend4_2[i] distal.append()
    for i=1, 2 dend3_2[i] distal.append()
    for i=1, 2 dend3_1[i] distal.append()
    for i=1, 2 dend5_1[i] distal.append()

}

proc geom() {
  soma {  L = 11.2753  diam = 9.99  }
  forsec proximal {L = 30.361812 diam = 1.3861217}	//forsec proximal {L = 20 diam = 1.125}	
  forsec middend  {L = 36.42597 diam = 1.3551664}//forsec middend  {L = 24 diam = 1.1}	// { L = 20		diam = 1 * (1+0.3) }	
  forsec distal {L = 174.77467	diam = 0.92105621}//forsec distal {L = 106.8	diam = 0.72}	// { L = 190	diam = 0.5 * (1+2) } 

  
}

print "Successful loading D1 MSN morph"

func lambda_f() { local i, x1, x2, d1, d2, lam
        if (n3d() < 2) {
                return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
        }
		// above was too inaccurate with large variation in 3d diameter
		// so now we use all 3-d points to get a better approximate lambda

        x1 = arc3d(0)
        d1 = diam3d(0)
        lam = 0
        for i=1, n3d()-1 {
                x2 = arc3d(i)
                d2 = diam3d(i)
                lam += (x2 - x1)/sqrt(d1 + d2)
                x1 = x2   d1 = d2
        }

        //  length of the section in units of lambda
        lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)

        return L/lam
}
proc geom_nseg() {
	freq = 100      // Hz, frequency at which AC length constant will be computed
	d_lambda = 0.1

	forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }
}

init_msn()
endtemplate d1msn